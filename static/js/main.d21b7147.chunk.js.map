{"version":3,"sources":["api.js","containers/QueryForm.js","utils/iterator.js","containers/App.js","index.js"],"names":["handleErrors","response","ok","Error","statusText","fetchData","query","fromDate","toDate","pageSize","fetch","then","json","catch","error","console","log","QueryForm","handleSubmit","className","onSubmit","event","htmlFor","id","placeholder","type","iterator","results","yearCountMap","Map","forEach","item","year","pubYear","count","has","get","set","App","state","fromYear","toYear","preventDefault","queryRef","document","getElementById","value","fromYearRef","toYearRef","pageSizeRef","setState","resultList","result","alert","options","chart","title","text","xAxis","categories","this","keys","yAxis","series","name","data","values","length","highcharts","Highcharts","Component","ReactDOM","render"],"mappings":"gQAEMA,EAAe,SAACC,GAClB,IAAIA,EAASC,GACT,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,GAgCII,EA5BG,SAACC,EAAOC,EAAUC,EAAQC,GACxC,OACIC,MAAM,UAZG,iEAYH,YAEAJ,EAFA,kCAQAC,EARA,uBAYAC,EAZA,uDAiBAC,EAjBA,qBAoBDE,KAAKX,GACLW,MAAK,SAAAV,GAAQ,OAAIA,EAASW,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OCoBzBG,EAnDG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,0BAAMC,UAAU,YAAYC,SAAU,SAAAC,GAAK,OAAIH,EAAaG,KAE1D,yBAAKF,UAAU,cACb,2BAAOG,QAAQ,SAAf,SAGA,2BAAOC,GAAG,QACHC,YAAY,kCACZC,KAAK,UAGd,yBAAKN,UAAU,cACb,2BAAOG,QAAQ,YAAf,aAGA,2BAAOC,GAAG,WACHC,YAAY,YACZC,KAAK,UAGd,yBAAKN,UAAU,cACb,2BAAOG,QAAQ,UAAf,WAGA,2BAAOC,GAAG,SACHC,YAAY,UACZC,KAAK,UAGd,yBAAKN,UAAU,cACb,2BAAOG,QAAQ,YAAf,aAGA,2BAAOC,GAAG,WACHC,YAAY,4BACZC,KAAK,UAGd,4BAAQA,KAAK,UAAb,Y,gCCvBKC,EApBE,SAACC,GAGd,IAAMC,EAAe,IAAIC,IAczB,OAZAF,EAAQG,SAAQ,SAASC,GACrB,IAAIC,EAAOD,EAAKE,QACZC,EAAQ,EAERN,EAAaO,IAAIH,IACjBE,EAAQN,EAAaQ,IAAIJ,GAAQ,EACjCJ,EAAaS,IAAIL,EAAME,IAGvBN,EAAaS,IAAIL,EAAM,MAGxBJ,GCmFIU,G,kNA3FXC,MAAQ,CACJjC,MAAO,GACPkC,SAAU,GACVC,OAAQ,GACRhC,SAAU,GACVkB,QAAS,I,EAGbT,aAAe,SAACG,GACZA,EAAMqB,iBAEN,IAAMC,EAAWC,SAASC,eAAe,SAASC,MAC5CC,EAAcH,SAASC,eAAe,YAAYC,MAClDE,EAAYJ,SAASC,eAAe,UAAUC,MAC9CG,EAAcL,SAASC,eAAe,YAAYC,MAEpDH,GACAI,GACAC,GACAC,EAGA,EAAKC,SAAS,CACV5C,MAAOqC,EACPH,SAAUO,EACVN,OAAQO,EACRvC,SAAUwC,IACX,WACC5C,EACI,EAAKkC,MAAMjC,MACX,EAAKiC,MAAMC,SACX,EAAKD,MAAME,OACX,EAAKF,MAAM9B,UACbE,MAAK,SAAAV,GAAQ,OACR,EAAKiD,SAAS,CACVvB,QAAS1B,EAASkD,WAAWC,eAK5CC,MAAM,sC,uDAIV,IAGMC,EAAU,CACZC,MAAO,CACH9B,KAAM,UAEV+B,MAAO,CACHC,KAAM,mCAEVC,MAAO,CACHC,WAXM,YAAQjC,EAASkC,KAAKrB,MAAMZ,SAASkC,SAa/CC,MAAO,CACHN,MAAO,CACHC,KAAM,gBAGdM,OAAQ,CAAC,CACLC,KAAM,aACNC,KAnBO,YAAQvC,EAASkC,KAAKrB,MAAMZ,SAASuC,aAuBpD,OACI,yBAAK/C,UAAU,OACb,kBAAC,EAAD,CAAWD,aAAc0C,KAAK1C,eAEI,IAA9B0C,KAAKrB,MAAMZ,QAAQwC,OAEX,yBAAKhD,UAAU,uBACb,kBAAC,IAAD,CACAiD,WAAYC,IACZf,QAASA,KAMX,U,GApFRgB,cCJlBC,IAASC,OAAO,kBAAC,EAAD,MAAQ5B,SAASC,eAAe,W","file":"static/js/main.d21b7147.chunk.js","sourcesContent":["const BASE_URL = 'https://www.ebi.ac.uk/europepmc/webservices/rest/search?query=';\n\nconst handleErrors = (response) => {\n    if(!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n};\n\n\nconst fetchData = (query, fromDate, toDate, pageSize) => {\n    return (\n        fetch(`${BASE_URL \n              }'${ \n              query \n              }'` +\n              ` AND ` +\n              `PUB_YEAR:` +\n              `[` +\n              `'${ \n              fromDate \n              }'` +\n              `+TO+` +\n              `'${ \n              toDate \n              }'` +\n              `]` +\n              `  sort_cited:y&format=json` +\n              `&pageSize=${ \n              pageSize \n              }&resulttype=lite`\n             )\n            .then(handleErrors)\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    );\n};\n\nexport default fetchData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst QueryForm = ({ handleSubmit }) => {\n    return (\n        <form className=\"queryForm\" onSubmit={event => handleSubmit(event)}>\n\n          <div className=\"inputField\">\n            <label htmlFor=\"query\">\n              Query\n            </label>\n            <input id=\"query\"\n                   placeholder=\"Please Enter your Query Details\"\n                   type=\"text\"/>\n          </div>\n\n          <div className=\"inputField\">\n            <label htmlFor=\"fromYear\">\n              From Year\n            </label>\n            <input id=\"fromYear\"\n                   placeholder=\"From Year\"\n                   type=\"text\"/>\n          </div>\n\n          <div className=\"inputField\">\n            <label htmlFor=\"toYear\">\n              To Year\n            </label>\n            <input id=\"toYear\"\n                   placeholder=\"To Year\"\n                   type=\"text\"/>\n          </div>\n          \n          <div className=\"inputField\">\n            <label htmlFor=\"pageSize\">\n              Page Size\n            </label>\n            <input id=\"pageSize\"\n                   placeholder=\"How many Response wanted?\"\n                   type=\"text\"/>\n          </div>\n          \n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n    );\n};\n\nQueryForm.propTypes = {\n    handleSubmit: PropTypes.func.isRequired\n};\n\nexport default QueryForm;\n","const iterator = (results) => {\n    /* [key] => count */\n    /* year => count */\n    const yearCountMap = new Map();\n\n    results.forEach(function(item){\n        let year = item.pubYear;\n        let count = 1;\n        \n        if (yearCountMap.has(year)) {\n            count = yearCountMap.get(year) + 1;\n            yearCountMap.set(year, count);\n        }\n        else {\n            yearCountMap.set(year, 1);\n        }\n    });\n    return yearCountMap;\n};\n\nexport default iterator;\n","import React, { Component } from 'react';\nimport fetchData from '../api.js';\nimport QueryForm from '../containers/QueryForm.js';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport iterator from '../utils/iterator.js';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        query: \"\",\n        fromYear: \"\",\n        toYear: \"\",\n        pageSize: \"\",\n        results: []\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        const queryRef = document.getElementById('query').value;\n        const fromYearRef = document.getElementById('fromYear').value;\n        const toYearRef = document.getElementById('toYear').value;\n        const pageSizeRef = document.getElementById('pageSize').value;\n\n        if (queryRef &&\n            fromYearRef &&\n            toYearRef &&\n            pageSizeRef\n           )\n        {\n            this.setState({\n                query: queryRef,\n                fromYear: fromYearRef,\n                toYear: toYearRef,\n                pageSize: pageSizeRef\n            }, () => {\n                fetchData(\n                    this.state.query,\n                    this.state.fromYear,\n                    this.state.toYear,\n                    this.state.pageSize\n                ).then(response =>\n                       this.setState({\n                           results: response.resultList.result\n                       }));\n            });\n        }\n        else {\n            alert(\"Please Enter all Necassary Values\");\n        }\n    }\n    render() {\n        const yearList = [...(iterator(this.state.results).keys())];\n        const countList = [...(iterator(this.state.results).values())];\n\n        const options = {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Papers Found in Particular Year'\n            },\n            xAxis: {\n                categories: yearList\n            },\n            yAxis: {\n                title: {\n                    text: 'Count Range'\n                }\n            },\n            series: [{\n                name: 'Year Range',\n                data: countList\n            }],\n        };\n\n        return (\n            <div className=\"App\">\n              <QueryForm handleSubmit={this.handleSubmit}/>\n              {\n                  this.state.results.length !== 0\n                      ? (\n                          <div className=\"highchart-container\">\n                            <HighchartsReact\n                            highcharts={Highcharts}\n                            options={options}\n                            />\n                          </div>\n                          \n                      )\n                      : (\n                          null\n                      )\n              }\n            </div>\n        );\n    }\n}\n\nexport default App;\n          \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App.js';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}